import org.apache.tools.ant.filters.ReplaceTokens

apply plugin: 'java'

buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

repositories {
    mavenCentral()

    maven { url 'https://oss.sonatype.org/content/groups/public/' }
}

apply plugin: 'net.minecraftforge.gradle'

sourceCompatibility = targetCompatibility = '1.8'

group 'com.matt.forgehax'
version project.property('forgehax.version')

archivesBaseName = "forgehax-" + project.property('forgehax.mc.version')

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}


//
// COREMOD
//
sourceSets {
    // classloader independent classes that need to be used by both the main and coremod sourcesets
    shared {
        compileClasspath += main.compileClasspath// + main.runtimeClasspath
    }

    coremod {
        compileClasspath += main.compileClasspath// + main.runtimeClasspath
        compileClasspath += shared.output
    }

    main {
        compileClasspath += shared.output

        java {
            final unCompilables = ['AutoPlace', 'HookReporter', 'Jesus', 'Markers', 'Nuker', 'PayloadSpoofer', 'Scaffold', 'WorldRendererAllocatedEvent', 'WorldRendererDeallocatedEvent']
            exclude({ file ->
                unCompilables.any { filter -> file.getName() == filter + '.java'}
            })
        }
    }

}

/*minecraft {
    version = project.property('forgehax.forge.version')
    runDir = "run"

    // channel_mapping
    mappings = project.property('forgehax.mcp.channel') + '_' + project.property('forgehax.mcp.mapping')
}*/
minecraft {
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: '20180921-1.13'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    //accessTransformer = file('my_at.cfg')

    // default run configurations.
    // these can be tweaked, removed, or duplicated as needed.
    runs {
        client = {
            // recommended logging data for a userdev environment
            properties 'forge.logging.markers': 'SCAN,REGISTRIES,REGISTRYDUMP'
            // recommended logging level for the console
            //properties 'forge.logging.console.level': 'debug'
            workingDirectory project.file('run').canonicalPath
            sources sourceSets.main, sourceSets.coremod
        }
    }
}


dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.15.0'

    minecraft ('net.minecraftforge:forge:1.13.2-25.0.219') {
        //exclude group: 'cpw.mods', module: 'modlauncher'
    }

    //implementation 'cpw.mods:modlauncher:2.0.+'
}


jar {
    manifest {
        attributes(["Specification-Title": "forgehax",
                    "Specification-Vendor": "nhackindustries",
                    "Specification-Version": "666", 
                    "Implementation-Title": project.name,
                    "Implementation-Version": "${version}",
                    "Implementation-Vendor" :"nhackindustries",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")],
        )
    }
    exclude ('assets/minecraft/textures/forgehax/*')

    // add coremod and shared source sets to the jar
    from sourceSets.coremod.output
    from sourceSets.shared.output
    //from sourceSets.main.output // attempt
}

processResources
{
    // TODO: update
    // this will ensure that this task is redone when the versions change.
    //inputs.property "version", project.version
    //inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    /*from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }*/
    println it


    // TODO: Filter images out properly
    //filesNotMatching("**/*.png") {
        it.filter ReplaceTokens, tokens: [
                "forgehax.version"      : project.property("forgehax.version"),
                "forgehax.mc.version"   : project.property("forgehax.mc.version"),
                "forgehax.forge.version": project.property("forgehax.forge.version"),
                "forgehax.mcp.version"  : project.property("forgehax.mcp.version"),
                "forgehax.mcp.channel"  : project.property("forgehax.mcp.channel"),
                "forgehax.mcp.mapping"  : project.property("forgehax.mcp.mapping")
        ]
    //}
}


task setGameDir() {
    // Check if custom gamedir has been passed, if not use default ones per platform
    if(!project.hasProperty("gameDir")) {
        if(org.gradle.internal.os.OperatingSystem.current().isWindows()) {
            project.ext.gameDir = System.getenv("APPDATA") + "/.minecraft"
        } else if(org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
            project.ext.gameDir = System.properties["user.home"] + "/Library/Application Support/minecraft"
        } else {
            project.ext.gameDir = System.properties["user.home"] + "/.minecraft"
        }
    }
}

task copyJar(type: Copy, dependsOn: [setGameDir]) {
    final gameDirectory = "$gameDir/mods/"

    // find previous jar (if it exists)
    final previousJars = fileTree(dir: gameDirectory).matching {
        include archivesBaseName + '*'
    }.files

    // change file com.matt.forgehax.asm.name
    if(previousJars) {
        // create .backups folder
        def backupDir = gameDirectory + '/.backups/'
        file(backupDir).mkdirs()

        for(File previousJar : previousJars) {
            def n = gameDirectory + '/.backups/' + previousJar.getName() + '.bk'
            def f = file(n)
            def i = 1
            while(f.exists()) {
                f = file(n + '_' + i)
                i++
            }
            previousJar.renameTo(f)
        }
    }

    // copy forgehax jar from libs to forge mod folder
    from jar
    into gameDirectory
}

task publishToMavenLocal() {} // dummy

build.finalizedBy copyJar
