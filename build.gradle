import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
  ext {
    forgehaxVersion = project.property('forgehax.version')

    minecraftVersion = project.property('forgehax.mc.version')
    forgeVersion = project.property('forgehax.forge.version')

    mcpVersion = project.property('forgehax.mcp.version')
    mcpChannel = project.property('forgehax.mcp.channel')
    mcpMapping = project.property('forgehax.mcp.mapping')
  }
  repositories {
    mavenCentral()
    jcenter()
    maven { url "http://files.minecraftforge.net/maven" }
  }
  dependencies {
    classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
  }
}

repositories {
  mavenCentral()
  maven { url "https://oss.sonatype.org/content/groups/public/" }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'net.minecraftforge.gradle'

sourceCompatibility = targetCompatibility = '1.8'

group 'com.matt.forgehax'
version forgehaxVersion

archivesBaseName = "forgehax-${version}"

configurations.all {
  resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

minecraft {
  mappings channel: mcpChannel, version: "${mcpMapping}-${mcpVersion}"

  runs {
    client {
      workingDirectory project.file('run')

      // Recommended logging data for a userdev environment
      property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

      // Recommended logging level for the console
      property 'forge.logging.console.level', 'debug'

      mods {
        forgehax {
          source sourceSets.main
        }
      }
    }
  }
}

dependencies {
  minecraft "net.minecraftforge:forge:${forgeVersion}"

  testCompile group: 'junit', name: 'junit', version: '4.12'
  testCompile group: 'org.mockito', name: 'mockito-core', version: '2.15.0'
}

jar {
  manifest {
    attributes([
        "Specification-Title": "ForgeHax",
        "Specification-Vendor": "nhackindustries",
        "Specification-Version": "1",
        "Implementation-Title": project.name,
        "Implementation-Version": "${version}",
        "Implementation-Vendor" :"nhackindustries",
        "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    ])
  }
}

processResources {
  filesMatching('**/mcmod.info') {
    it.filter ReplaceTokens, tokens: [
        version: project.version,
        mcversion: project.minecraft.version
    ]
  }

  filesMatching('**/config.properties') {
    it.filter ReplaceTokens, tokens: [
      "forgehax.version"      : forgehaxVersion,
      "forgehax.mc.version"   : minecraftVersion,
      "forgehax.forge.version": forgeVersion,
      "forgehax.mcp.version"  : mcpVersion,
      "forgehax.mcp.channel"  : mcpChannel,
      "forgehax.mcp.mapping"  : mcpMapping
    ]
  }
}


task setGameDir() {
  // Check if custom gamedir has been passed, if not use default ones per platform
  if (!project.hasProperty("gameDir")) {
    if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
      project.ext.gameDir = System.getenv("APPDATA") + "/.minecraft"
    } else if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
      project.ext.gameDir = System.properties["user.home"] + "/Library/Application Support/minecraft"
    } else {
      project.ext.gameDir = System.properties["user.home"] + "/.minecraft"
    }
  }
}

class CopyJarTask extends DefaultTask {
  @TaskAction
  protected void exec() {
    project.copy {
      final mc = "${project.ext.gameDir}/mods/${project.minecraft.version}"

      // find previous jar (if it exists)
      final previousJars = project.fileTree(dir: mc).matching {
        include "${project.archivesBaseName}*"
      }.files

      // change file name
      if (previousJars) {
        // create .backups folder
        project.file("${mc}/.backups/").mkdirs()

        for (File previousJar : previousJars) {
          final n = "${mc}/.backups/${previousJar.getName()}.bk"
          def f = project.file(n)
          def i = 1
          while (f.exists()) {
            f = project.file("${n}_${i}")
            i++
          }
          previousJar.renameTo(f)
        }
      }

      // copy forgehax jar from libs to forge mod folder
      from project.jar
      into "${project.ext.gameDir}/mods/${project.minecraft.version}"
    }
  }
}

task copyJar(type: CopyJarTask, dependsOn: [setGameDir])

build.finalizedBy copyJar
